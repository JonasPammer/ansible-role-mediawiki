---
# tasks file of roles/mediawiki-prepare

- name: test if 'gather_type' for {{ extension_name }}-Extension is set correctly
  ansible.builtin.assert:
    that:
      - extension_gather_type is defined
      - extension_gather_type in ["git", "composer"]
    quiet: true

- name: stat folder of {{ extension_name }}-Extension
  ansible.builtin.stat:
    path: "{{ mediawiki_destination }}/extensions/{{ extension_name }}/"
  register: mediawiki__register_stat_extension_folder
- name: stat '.git' of {{ extension_name }}-Extension
  ansible.builtin.stat:
    path: "{{ mediawiki_destination }}/extensions/{{ extension_name }}/.git"
  register: mediawiki__register_stat_extension_dotgit

- name: Remove Folder of {{ extension_name }}-Extension (when '.git' does not exist and extension_gather_type is 'git')
  ansible.builtin.file:
    path: "{{ mediawiki_destination }}/extensions/{{ extension_name }}"
    state: absent
  when: not mediawiki__register_stat_extension_dotgit.stat.exists and extension_gather_type == "git"

# (As descibed on https://www.entropywins.wtf/blog/2013/11/24/upgrading-an-extension-that-now-uses-composer/,
#  the directory must be removed when wanting to switch to using Composer for management of an extension.)
- name: Remove Folder of {{ extension_name }}-Extension (when '.git' does exist and extension_gather_type is 'composer')
  ansible.builtin.file:
    path: "{{ mediawiki_destination }}/extensions/{{ extension_name }}"
    state: absent
  when: mediawiki__register_stat_extension_dotgit.stat.exists and extension_gather_type == "composer"

- name: Ensure folder of {{ extension_name }}-Extension has Mediawiki's linux user as its owner
  ansible.builtin.file:
    path: "{{ mediawiki_destination }}/extensions/{{ extension_name }}"
    state: directory
    recurse: true
    owner: "{{ mediawiki_linux_username }}"
  when: mediawiki__register_stat_extension_folder.stat.exists

- name: (Run tasks as Mediawiki's Linux Users to gather Extension through Composer)
  become_user: "{{ mediawiki_linux_username }}"
  when: extension_gather_type == "composer"
  block:
    # 'composer config' complains if the `COMPOSER` file does not at least exist and does not have JSON
    - name: Ensure composer.local.json exists with correct owner/group/mode.
      ansible.builtin.copy:
        dest: "{{ mediawiki_destination }}/composer.local.json"
        owner: root
        group: root
        mode: u=rwx,g=r,o=r
        force: false
        content: "{}" # composer expects file to contain valid json

    - name:
        Run the supplied prelimentary 'composer config' commands needed for require
        of {{ extension_composer_name }} Extension into Mediawiki's composer.local.json file
        as Mediawiki's Linux User.
      community.general.composer:
        command: config
        arguments: "{{ composer_config_action.arguments | default(composer_config_action) }}"
        working_dir: "{{ mediawiki_destination }}"
      changed_when: false
      environment:
        COMPOSER: composer.local.json
      loop: "{{ extension_composer_install_pre_config_actions }}"
      loop_control:
        loop_var: composer_config_action

    - name:
        Run 'COMPOSER=composer.local.json composer require --no-update {{ extension_composer_name }} {{ extension_composer_version }}'
        in Mediawiki's directory as Mediawiki's Linux User.
      community.general.composer:
        command: require
        arguments: "--no-update  '{{ extension_composer_name }}' {{ extension_composer_version }}"
        working_dir: "{{ mediawiki_destination }}"
      environment:
        COMPOSER: composer.local.json

- name: (Run Tasks as Mediawiki's Linux Users to gather Extension through Git)
  become_user: "{{ mediawiki_linux_username }}"
  when: extension_gather_type == "git"
  block:
    - name:
        Run 'COMPOSER=composer.local.json composer remove {{ extension_composer_name }} {{ extension_composer_version }}'
        in Mediawiki's directory as Mediawiki's Linux User
      community.general.composer:
        command: remove
        arguments: "'{{ extension_composer_name }}'"
        working_dir: "{{ mediawiki_destination }}"
      environment:
        COMPOSER: composer.local.json
      failed_when: false
      when: extension_composer_name|length > 0

    - name: Download {{ extension_name }}-Extension from Git Mediawiki's 'extensions/'-directory as Mediawiki's Linux User
      ansible.builtin.git:
        repo: "{{ extension_git_url }}"
        dest: "{{ mediawiki_destination }}/extensions/{{ extension_name }}"
        version: "{{ extension_git_version }}"
      register: mediawiki__register_extension_git
      failed_when: mediawiki__register_extension_git.failed and "Local modifications" not in mediawiki__register_extension_git.msg

    - become: true
      when: |
        (extension_git_run_composer_install and mediawiki__register_extension_git.changed | bool)
        or extension_git_run_composer_install == "always"
      block:
        - name: stat if Folder of {{ extension_name }}-Extension contains 'composer.json'
          ansible.builtin.stat:
            path: "{{ mediawiki_destination }}/extensions/{{ extension_name }}/composer.json"
          register: mediawiki__register_stat_extension_composer_json

        - name:
            Run the supplied prelimentary 'composer config' commands needed for composer install
            of {{ extension_name }}-Extension as Mediawiki's Linux User in the Extensions' own directory.
          community.general.composer:
            command: config
            arguments: "{{ composer_config_action.arguments | default(composer_config_action) }}"
            working_dir: "{{ mediawiki_destination }}/extensions/{{ extension_name }}"
          changed_when: false
          when: mediawiki__register_stat_extension_composer_json.stat.exists
          loop: "{{ extension_composer_install_pre_config_actions }}"
          loop_control:
            loop_var: composer_config_action

        - name: Run 'composer install' in Directory of {{ extension_name }}-Extension as Mediawiki's Linux User
          community.general.composer:
            command: install
            working_dir: "{{ mediawiki_destination }}/extensions/{{ extension_name }}"
          when: mediawiki__register_stat_extension_composer_json.stat.exists

- name: Install system package dependencies of {{ extension_name }}-Extension
  ansible.builtin.package:
    name: "{{ system_package_dependencies }}"
    state: present
  when: system_package_dependencies|length > 0
